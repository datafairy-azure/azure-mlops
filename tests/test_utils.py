# Generated by CodiumAI
from mlops.utils import load_config, MLConnection
from azure.identity import DefaultAzureCredential, InteractiveBrowserCredential

# from azure.ai.ml import MLClient
# import mlflow
import yaml
import pytest


class TestLoadConfig:
    # Loads a valid YAML config file successfully
    def test_load_valid_yaml_config_file(self):
        # Arrange
        config_path = "data\\valid_config.yml"

        # Act
        result = load_config(config_path)

        # Assert
        assert isinstance(result, dict)

    # Handles empty config files gracefully
    def test_handle_empty_config_files(self):
        # Arrange
        config_path = "data\\empty_config.yml"

        # Act
        result = load_config(config_path)

        # Assert
        assert isinstance(result, dict)

    # Raises a FileNotFoundError if the config file path is invalid
    def test_raise_file_not_found_error(self):
        # Arrange
        config_path = "data\\invalid_path.yml"

        # Act and Assert
        with pytest.raises(FileNotFoundError):
            load_config(config_path)

    # Raises a yaml.parser.ParserError if the config file is not a valid YAML file
    def test_raise_parser_error(self):
        # Arrange
        config_path = "data\\invalid_yaml_config.yml"

        # Act and Assert
        with pytest.raises(yaml.parser.ParserError):
            load_config(config_path)

    # Raises a TypeError if the config file is not a string
    def test_raise_type_error(self):
        # Arrange
        config_path = 123

        # Act and Assert
        with pytest.raises(TypeError):
            load_config(config_path)


class TestGetCredential:
    # Returns DefaultAzureCredential when credential_type is 'default'
    def test_returns_default_credential(self):
        connection = MLConnection(
            "default",
            {
                "connections": {
                    "subscription_id": "test_subscription_id",
                    "resource_group": "test_resource_group",
                    "workspace": "test_workspace",
                }
            },
        )
        credential = connection.get_credential()
        assert isinstance(credential, DefaultAzureCredential)

    # Returns InteractiveBrowserCredential when credential_type is 'interactive'
    def test_returns_interactive_credential(self):
        connection = MLConnection(
            "interactive",
            {
                "connections": {
                    "subscription_id": "test_subscription_id",
                    "resource_group": "test_resource_group",
                    "workspace": "test_workspace",
                }
            },
        )
        credential = connection.get_credential()
        assert isinstance(credential, InteractiveBrowserCredential)

    # Raises no exceptions when credential_type is valid
    def test_no_exceptions_when_valid_credential_type(self):
        connection = MLConnection(
            "default",
            {
                "connections": {
                    "subscription_id": "test_subscription_id",
                    "resource_group": "test_resource_group",
                    "workspace": "test_workspace",
                }
            },
        )
        try:
            connection.get_credential()
        except Exception:
            pytest.fail(
                "An exception was raised when a valid credential type was provided."
            )

    # Raises ValueError when credential_type is not 'default' or 'interactive'
    # def test_raises_value_error_when_invalid_credential_type(self):
    #     connection = MLConnection(
    #         "invalid", {
    #             "connections":{
    #                 "subscription_id": "test_subscription_id",
    #                 "resource_group": "test_resource_group",
    #                 "workspace" : "test_workspace"
    #             }
    #         })
    #     with pytest.raises(ValueError):
    #         connection.get_credential()


class TestMlConnect:
    # Connects to ML workspace with valid credentials and config values.
    def test_valid_credentials_and_config(self, mocker):
        # Mock the MLClient class
        mocker.patch("azure.ai.ml.MLClient")

        mocker.patch("azure.identity.DefaultAzureCredential")
        mocker.patch("azure.identity.InteractiveBrowserCredential")

        mocker.patch("mlops.utils.MLConnection")
        mocker.patch.object(MLConnection, "get_credential", autospec=True)
        mocker.patch.object(MLConnection, "ml_connect", autospec=True)

        # Call the ml_connect function
        connection = MLConnection(
            "default",
            {
                "connections": {
                    "subscription_id": "test_subscription_id",
                    "resource_group": "test_resource_group",
                    "workspace": "test_workspace",
                }
            },
        )
        connection.get_credential.assert_called_once()

        # MLConnection can successfully connect to ML workspace using default credentials

    # def test_connect_default_credentials(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch("azure.ai.ml.MLClient")
    #     mocker.patch('mlops.utils.MLConnection')
    #     mock_connection = mocker.patch.object(MLConnection, "ml_connect", autospec=True)

    #     # Create an instance of MLConnection with default credentials
    #     ml_connection = MLConnection(
    #         "default", {
    #             "connections":{
    #                 "subscription_id": "test_subscription_id",
    #                 "resource_group": "test_resource_group",
    #                 "workspace" : "test_workspace"
    #             }
    #         }
    #     )

    #     mock_connection.return_value = ml_connection.ml_connect()

    #     # Assert that MLClient is called with the correct arguments
    #     ml_connection.ml_connect.assert_called_with(
    #         ml_connection.get_credential.return_value,
    #         ml_connection.cfg['connections']['subscription_id'],
    #         ml_connection.cfg['connections']['resource_group'],
    #         ml_connection.cfg['connections']['workspace']
    #     )

    # def test_connect_to_ml_workspace_with_default_credentials(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch('mlops.utils.MLClient')

    #     # Create an instance of MLConnection with default credentials
    #     ml_connection = MLConnection(
    #         "default", {
    #             "connections":{
    #                 "subscription_id": "test_subscription_id",
    #                 "resource_group": "test_resource_group",
    #                 "workspace" : "test_workspace"
    #             }
    #         }
    #     )

    #     # Call the ml_connect method
    #     ml_connection.ml_connect()

    #     # Assert that the MLClient class was called with the correct arguments
    #     MLClient.assert_called_once_with(
    #         mocker.ANY,
    #         'test_subscription_id',
    #         'test_resource_group',
    #         'test_workspace'
    #     )

    # # Uses default credential when 'credential_type' is 'default'.
    # def test_default_credential(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch("azure.ai.ml.MLClient")

    #     # Mock the mlflow.set_tracking_uri function
    #     mocker.patch("mlflow.set_tracking_uri")

    #     # Call the ml_connect function with credential_type='default'
    #     credential = ml_connect("default", {"connections": {"tenant_id": "test_tenant_id"}})

    #     # Assert that the get_credential function was called with the correct parameter
    #     ml_connect.get_credential.assert_called_once_with("default")

    #     # Assert that the MLClient class was called with the correct parameters
    #     MLClient.assert_called_once_with(
    #         credential,
    #         "test_subscription_id",
    #         "test_resource_group",
    #         "test_workspace"
    #     )

    #     # Assert that the mlflow.set_tracking_uri function was called with the correct parameter
    #     mlflow.set_tracking_uri.assert_called_once_with("test_mlflow_tracking_uri")

    # # Uses interactive credential when 'credential_type' is 'interactive'.
    # def test_interactive_credential(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch("azure.ai.ml.MLClient")

    #     # Mock the mlflow.set_tracking_uri function
    #     mocker.patch("mlflow.set_tracking_uri")

    #     # Call the ml_connect function with credential_type='interactive'
    #     credential = ml_connect("interactive", {"connections": {"tenant_id": "test_tenant_id"}})

    #     # Assert that the get_credential function was called with the correct parameter
    #     ml_connect.get_credential.assert_called_once_with("interactive")

    #     # Assert that the MLClient class was called with the correct parameters
    #     MLClient.assert_called_once_with(
    #         credential,
    #         "test_subscription_id",
    #         "test_resource_group",
    #         "test_workspace"
    #     )

    #     # Assert that the mlflow.set_tracking_uri function was called with the correct parameter
    #     mlflow.set_tracking_uri.assert_called_once_with("test_mlflow_tracking_uri")

    # # Raises ValueError when 'credential_type' is not 'default' or 'interactive'.
    # def test_invalid_credential_type(self, mocker):
    #     # Call the ml_connect function with an invalid credential_type
    #     with pytest.raises(ValueError):
    #         ml_connect("invalid", {"connections": {"tenant_id": "test_tenant_id"}})

    # # Uses InteractiveLoginAuthentication when 'credential.get_token' raises an Exception.
    # def test_interactive_login_authentication(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch("azure.ai.ml.MLClient")

    #     # Mock the mlflow.set_tracking_uri function
    #     mocker.patch("mlflow.set_tracking_uri")

    #     # Call the ml_connect function with credential_type='default'
    #     credential = ml_connect("default", {"connections": {"tenant_id": "test_tenant_id"}})

    #     # Assert that the InteractiveLoginAuthentication class was called with the correct parameter
    #     ml_connect.InteractiveLoginAuthentication.assert_called_once_with(
    #         tenant_id="test_tenant_id"
    #     )

    #     # Assert that the MLClient class was called with the correct parameters
    #     MLClient.assert_called_once_with(
    #         credential,
    #         "test_subscription_id",
    #         "test_resource_group",
    #         "test_workspace"
    #     )

    #     # Assert that the mlflow.set_tracking_uri function was called with the correct parameter
    #     mlflow.set_tracking_uri.assert_called_once_with("test_mlflow_tracking_uri")

    # # Returns MLClient object when all parameters are valid.
    # def test_valid_parameters(self, mocker):
    #     # Mock the MLClient class
    #     mocker.patch("azure.ai.ml.MLClient")

    #     # Mock the mlflow.set_tracking_uri function
    #     mocker.patch("mlflow.set_tracking_uri")

    #     # Call the ml_connect function with valid parameters
    #     result = ml_connect("default", {"connections": {"tenant_id": "test_tenant_id"}})

    #     # Assert that the result is an instance of MLClient
    #     assert isinstance(result, MLClient)

    #     # Assert that the get_credential function was called with the correct parameter
    #     credential = ml_connect.get_credential.assert_called_once_with("default")

    #     # Assert that the MLClient class was called with the correct parameters
    #     MLClient.assert_called_once_with(
    #         credential,
    #         "test_subscription_id",
    #         "test_resource_group",
    #         "test_workspace"
    #     )

    #     # Assert that the mlflow.set_tracking_uri function was called with the correct parameter
    #     mlflow.set_tracking_uri.assert_called_once_with("test_mlflow_tracking_uri")
